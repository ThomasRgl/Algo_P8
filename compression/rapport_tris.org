#+TITLE: Tris de vecteurs
#+AUTHOR: Thomas ROGLIN
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <style>pre.src {background-color: #1c2841; color: #e5e5e5;}</style>



* Algo de tris


** tris à bulle

*** complexité temps

Pour trier le vecteur avec cette méthode, on effectue un premier parcours du dernier au premier element.
Puis pour chaque élément du parcours précédent, on refait un parcours d'une taille n/2 en moyenne
On a donc une complexité d'environ O(n*n/2).

*** complexité espace
Il n'y a pas d'appel récursif et pas d'allocation supplémentaire.
La complexité en espace est donc donc linéaire O(N).

*** code
#+BEGIN_SRC c
void tri_bull_vect(vec_t * vect){


    float tmp = 0;
    for( size_t i = vect->nbele - 1; i >= 1; i-- ){
        for( size_t j = 0; j < i; j++ ){
            if( vect->v[j + 1] < vect->v[j] ){
                tmp = vect->v[j + 1];
                vect->v[j + 1] = vect->v[j];
                vect->v[j] = tmp;
            }
        }
    }
}
#+END_SRC

** tris selection
*** complexité temps
On parcourt le vecteur du ieme  élément et à chaque passage on sélectionne d'indice du plus petit élément.
On échange l'élement le plus petit avec le ieme élément puis on incrémente i
On a donc une complexité quadratique inférieure à O(n^2).

*** complexité espace
Il n'y a pas d'appel récursif et pas d'allocation supplémentaire.
La complexité en espace est donc donc linéaire O(N).

*** code
#+BEGIN_SRC c
void tri_selection_vect(vec_t * vect){
    int n = vect->nbele;
    size_t min = 0;
    float tmp = 0;
    for(size_t i = 0; i <= n - 2; i++ ){
        min = i;
        for( size_t j = i + 1; j < n; j++){
            if( vect->v[min] > vect->v[j])
            min = j;
        }
        if(min != i){
            tmp = vect->v[i];
            vect->v[i] = vect->v[min];
            vect->v[min] = tmp;
        }
    }
}
#+END_SRC

** tris insertion
*** complexité temps
On parcourt le vecteur du deuxième au dernier élément, et à chaque incrémentation, on place le nouvel élément à sa place en reparcourant la liste en sens inverse.
On a donc une complexité quadratique inférieure à O(n^2).

*** complexité espace
Il n'y a pas d'appel récursif et pas d'allocation supplémentaire.
La complexité en espace est donc donc linéaire O(N).

*** code
#+BEGIN_SRC c
void tri_insertion_vect(vec_t * vect){
    int n = vect->nbele;
    size_t index = 0;
    float tmp = 0;
    for(size_t i = 1; i < n; i++ ){
        tmp = vect->v[i];
        index = i;
        while( tmp < vect->v[index - 1] && index > 0 ){
            vect->v[index] = vect->v[index - 1];
            index --;
        }
        vect->v[index] = tmp;
    }
}
#+END_SRC


** tris fusion
*** complexité temps
Pour trier le vecteur on va séparer récursivement le vecteur en 2 parties,
puis on va refusionner chaque partie en triant les éléments
ce qui donne une complexité d'environ O(nlog2(n)).

*** complexité espace
Il y a log2(n) appels récurcif, le vecteur de taille n pour stocker la liste et un espace temporaire de la même taille que le vecteur
Il y a donc une complexité en espace de O(log2(n) + 2n).
*** code
#+BEGIN_SRC c
float * fusion_vect(size_t debut, size_t milieu, size_t fin, float * vect, float * tmp ){
    size_t indexA = debut;
    size_t indexB = milieu + 1;
    size_t tmpIndex = debut;
    while(indexA != milieu + 1 && indexB != fin + 1 ){
        if(vect[indexA] < vect[indexB]){
            tmp[tmpIndex] = vect[indexA];
            indexA++;
            tmpIndex++;
        }
        else{
            tmp[tmpIndex] = vect[indexB];
            indexB++;
            tmpIndex++;
        }
    }

    while( indexB != fin + 1 ){ //On colle de indexB à milieu
        tmp[tmpIndex] = vect[indexB];
        indexB++;
        tmpIndex++;
    }
    while(indexA != milieu + 1){//On colle de indexA à milieu
        tmp[tmpIndex] = vect[indexA];
        indexA++;
        tmpIndex++;
    }
    memcpy(vect + debut, tmp + debut,  ((fin - debut) + 1)  * sizeof(float) );
    return vect;
}
#+END_SRC

#+BEGIN_SRC c
float * split_vect(size_t debut, size_t fin, float * vect, float * tmp ){
    if(fin - debut < 1)
        return vect;
    size_t milieu = debut + ((fin - debut) >> 1);
    vect = split_vect(debut, milieu, vect, tmp );
    vect = split_vect( milieu + 1 , fin, vect, tmp );
    return fusion_vect( debut, milieu, fin, vect, tmp);
}
#+END_SRC

#+BEGIN_SRC c
void tri_fusion_vect(vec_t * vect){
    float * vectP = vect->v;
    float * tmp = malloc(vect->nbele * sizeof(float));
    memcpy(tmp, vectP, vect->nbele * sizeof(float) );
    vect->v = split_vect(0, vect->nbele - 1, vectP, tmp );
}
#+END_SRC

** tris par tas
*** complexité temps
 /
*** complexité espace
 /
*** code
#+BEGIN_SRC c
void tamiser(float * vect, size_t noeud, size_t n) {
    size_t k = noeud;
    size_t j = 2 * k;
    float tmp;
    while( j <= n){
        if(j < n && vect[j] < vect[j+1]){
            j++;
        }
        if( vect[k] < vect[j] ){
            tmp = vect[k];
            vect[k] = vect[j];
            vect[j] = tmp;
            k = j;
            j = 2 * k;
        }
        else{
            j = n + 1;
        }
    }
}
#+END_SRC

#+BEGIN_SRC c
void triParTas(float * vect, size_t longueur){
    float tmp;
    for( int i = longueur >> 1; i >= 0; i--){
        tamiser(vect, i, longueur);
    }
    for( int i = longueur - 1; i >= 1; i--){
        tmp = vect[i];
        vect[i] = vect[0];
        vect[0] = tmp;
        tamiser(vect, 0, i-1);
    }
}
#+END_SRC

#+BEGIN_SRC c
void tri_tas_vect( vec_t * vect ){
    triParTas(vect->v, vect->nbele);
}
#+END_SRC


** tris rapide
*** complexité temps
On va choisir un pivot et mettre à gauche du pivot les éléments plus petits et à droite les éléments plus grands
puis on va refaire récursivement cette opération sur les éléments à droite et à gauche du pivot
On a donc une complexité de O(n) pour trier les éléments à droite et à gauche du pivot
puis il y aura O(log2n) séparations récurcive dans le meilleur des cas, et O(n) dans le pire des cas
On a donc une complexité en temps de O(nlog2(n)) dans le meilleur des cas et O(n^2) dans le pire.
*** complexité espace
On a entre n et log2(n) appels récursifs et un vecteur de taille n,
on a donc une complexité en espace de O(n).

*** code
#+BEGIN_SRC c
int  partionner(float * vect, int deb, int fin, int pivot ){
    float tmp = vect[pivot];
    vect[pivot] = vect[fin];
    vect[fin] = tmp;

    int j = deb;
    for(int i = deb; i <= fin - 1; i++){
        if( vect[i] <= vect[fin]){
            tmp = vect[i];
            vect[i] = vect[j];
            vect[j] = tmp;

            j++;
        }
    }

    tmp = vect[fin];
    vect[fin] = vect[j];
    vect[j] = tmp;

    return j;

}
#+END_SRC

#+BEGIN_SRC c
void triRapide( float * vect, int deb, int fin){
    if(deb < fin){
        int pivot = deb; // choix pivot
        pivot = partionner(vect, deb, fin, pivot);
        triRapide(vect, deb, pivot - 1 );
        triRapide(vect, pivot + 1 , fin );
    }
}
#+END_SRC


#+BEGIN_SRC c
void tri_rapide_vect( vec_t * vect ){
    triRapide(vect->v, 0, vect->nbele - 1);
}
#+END_SRC

* Fonction de benchmark

#+BEGIN_SRC c
void dubious_random_vect_benchmark(char const *fileName ){


    FILE *fp;

    fp = fopen(fileName, "w");

    clock_t t0, t1, dt, t_null;
    vec_t vect;
    t0 = clock();
    t_null = t0 - t0;
    int nb_sample = 10;
    fprintf(fp,"x, tri à bulle, tri insertion, tri selection, tri fusion, tri tas, tri rapide\n");
    for(unsigned long long n = 16; n < 1000000 /*10^6*/; n *= 2){
        fprintf(fp,"%*lld,", 0, n );
        printf("%lld\n", n );


        //
        dt = t_null;
        for(int i = 0; i < nb_sample; i++ ){
            if(n > 10000){break;}
            vect = creeretremplir(n);
            t0 = clock();
            tri_bull_vect(&vect);
            t1 = clock();
            dt += t1 - t0;
        }
        dt = dt/nb_sample;
        fprintf(fp, "%*d,", 0, (int) dt );

        //
        dt = t_null;
        for(int i = 0; i < nb_sample; i++ ){
            if(n > 20000){break;}
            vect = creeretremplir(n);
            t0 = clock();
            tri_insertion_vect(&vect);
            t1 = clock();
            dt += t1 - t0;
        }
        dt = dt/nb_sample;
        fprintf(fp, "%*d,", 0, (int) dt );

        //
        dt = t_null;
        for(int i = 0; i < nb_sample; i++){
            if(n > 30000){break;}
            vect = creeretremplir(n);
            t0 = clock();
            tri_selection_vect(&vect);
            t1 = clock();
            dt += t1 - t0;
        }
        dt = dt/nb_sample;
        fprintf(fp, "%*d,", 0, (int) dt );

        //
        dt = t_null;
        for(int i = 0; i < nb_sample; i++){
            vect = creeretremplir(n);
            t0 = clock();
            tri_fusion_vect(&vect);
            t1 = clock();
            dt += t1 - t0;
        }
        dt = dt/nb_sample;
        fprintf(fp, "%*d,", 0, (int) dt );

        //
        dt = t_null;
        for(int i = 0; i < nb_sample; i++){
            vect = creeretremplir(n);
            t0 = clock();
            tri_tas_vect(&vect);
            t1 = clock();
            dt += t1 - t0;
        }
        dt = dt/nb_sample;
        fprintf(fp, "%*d,", 0, (int) dt );

        //
        dt = t_null;
        for(int i = 0; i < nb_sample; i++){
            vect = creeretremplir(n);
            t0 = clock();
            tri_rapide_vect(&vect);
            t1 = clock();
            dt += t1 - t0;
        }
        dt = dt/nb_sample;
        fprintf(fp, "%*d,", 0, (int) dt );



        //
        fprintf(fp, "\n");


    }
    printf("done\n");
    fclose(fp);
    return;


}
#+END_SRC

* Mesure de perf

On remarque sur le graphique que la courbe du tri fusion, tri par tas et tri rapide semble parallele à la courbe nlog2(n)
Cette observation concorde avec l'analyse du code, ces 3 tris ont donc une complexité O(nlog2(n))
Aussi on remarque que le tri à bulle, tri insertion et tri selection semblent avoir une courbe parallele à la courbe n^2
Ils ont donc une complexité quadratique O(n^2)

** sans flag d'optimisation

[[./img/trace1.png]]
[[./img/trace2.png]]
[[./img/trace3.png]]

** avec flag d'optimisation

[[./img/trace1_03_marchNative.png]]
[[./img/trace2_03_marchNative.png]]
[[./img/trace3_03_marchNative.png]]
